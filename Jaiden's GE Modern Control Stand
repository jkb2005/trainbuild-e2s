@name Jaidens GE Modern Control Stand
@inputs RLCPT:entity Horn BellToggle AlerterReset Sander
@outputs BellOut
@persist A RadioOnTop AirBrakeType RadioRandom

@model models/parts/controlstand_ge_modern_digital.mdl
E=entity()

if(first() | dupefinished()){

RadioOnTop = 0 #If you want the radio on top of the stand or above the breaks
RadioRandom = 1 #If you want the radio to be in top or above the breaks but random. This is good for ones with random numplates. Just adds variety...
AirBrakeType = 0

if(RadioRandom){
RadioOnTop = round(random(2))
}


A++

holoCreate(A)
holoModel(A,"models/parts/radio_msa.mdl")
holoAng(A, entity():toWorld(ang(0,-2,0)))
holoScale(A, vec(1,1,1))
holoMaterial(A,"")
holoColor(A, vec(255))
holoParent(A,entity())
if(RadioOnTop){
holoPos(A,entity():toWorld(vec(-12,-5,54.65)))   
}else{
holoPos(A,entity():toWorld(vec(-12,-6.5,50)))
}

A++
holoCreate(A)
holoModel(A,"models/parts/phone.mdl")
holoPos(A,entity():toWorld(vec(-20,0,40)))
holoAng(A, entity():toWorld(ang(0,-90,0)))
holoScale(A, vec(1.25))
holoMaterial(A,"")
holoColor(A, vec(255))
holoParent(A,entity())

}

PTWL = RLCPT:wirelink()

local BrakeInfo = PTWL["BrakeInfo",array]
local AirBrake = BrakeInfo[2,number]
local LocoBrake = PTWL["LocoBrakePressure",number]
local Dynamics = PTWL["Dynamics",number]
local DynaNotch = PTWL["DynaNotch",number]
local Reverser = PTWL["Reverser",number]
local Throttle = PTWL["Notch",number]
local Load = PTWL["Load",number]
local LocoBrakePressure = BrakeInfo[4,number]
local TrainBrakePressure = BrakeInfo[2,number]
local Emergency = PTWL["Emergency",number]

    if(!AirBrakeType){
        TB_Notch = PTWL["AB16M_Notch",number]
        LB_Notch = PTWL["LB16M_Notch",number]
    }

E:setBodygroup(6,Horn)
E:setBodygroup(8,Sander)
E:setBodygroup(9,AlerterReset)
if(BellToggle){
BellOut = !BellOut
E:setBodygroup(7,BellOut)
}

interval(100)

if(AirBrakeType){
        #26L
        E:setBodygroup(4,(Emergency & (TrainBrakePressure==0)) ? 6 : 1+(TrainBrakePressure<22.5)+(TrainBrakePressure<45)+(TrainBrakePressure<67.5)+(TrainBrakePressure==0))
        E:setBodygroup(5,1+(LocoBrakePressure>22.5)+(LocoBrakePressure>45)+(LocoBrakePressure>67.5)+(LocoBrakePressure==90))
    }else{
        #16M
        switch(TB_Notch){
            case -1,
                TB_BrakePos = 1
                break
            case 0,
                TB_BrakePos = 3
                break
            case 1,
                TB_BrakePos = 5
                break
            case 2,
                TB_BrakePos = 6
                break
            default,
                break
        }
        E:setBodygroup(4,TB_BrakePos)
        E:setBodygroup(5,3 + (LB_Notch*2))
}

if(Reverser == -1){
E:setBodygroup(1,1)   
}elseif(Reverser == 0){
E:setBodygroup(1,2)   
}elseif(Reverser == 1){
E:setBodygroup(1,3)   
}elseif(Reverser == 2){
E:setBodygroup(1,0)   
}


if(Dynamics){
E:setBodygroup(3,DynaNotch+1)
E:setBodygroup(2,0)
}elseif(!Dynamics){
E:setBodygroup(3,0)
E:setBodygroup(2,Throttle)
}
